searchState.loadedDescShard("lib", 0, "Defines our shared libraries.\nDefines a simple set of constant identifiers for messages.\nDefines a gain scheduling PID controller.\nMakes the instantiation of a new <code>PID</code> controller a bit more …\nDefines a PID controller.\nDefines the protocol used to communicate over can bus.\nDefines a few wrapper types.\nRepresents a status message from the battery.\nThe message id was not in <code>Message</code>.\nRepresents a write of the left motor state.\nDefines the message enumerations. Enumerates all of the …\nRepresents a status message from the left motor.\nRepresents a status message from the right motor.\nRepresents a write of the left motor state.\nRepresents a write of alpha sensor value.\nRepresents a write of bed load cell value.\nRepresents a write of front load cell value.\nRepresents a write of theta sensor value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn example of valid PID parameters valid up until the …\nProvides a simple gain scheduled controller.\nA set of PID parameters.\nComputes the control signal using a PID control strategy.\nComputes the controller output at the latest timestamped …\nSets the reference value to follow.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current gain.\nReturns the derivative gain.\nReturns the integral gain.\nReturns the proportional gain.\nReturns the upper bound of the parameters.\nReturns the lower bound of the parameters.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe derivative gain.\nThe integral gain.\nThe proportional gain.\nThe upper bound.\nThe lower bound.\nCreates a new controller that sets the output on the …\nRegisters a new timestamped measurement.\nSets the current bucket bucket or schedule to use.\nUser tried to use the controller before assigning a …\nProvides a light weight interface for setting the output …\nThe value written to the channel caused some error.\nWraps the info about a specific time step in the control …\nEnumerates the error cases for the controller.\nThrown when a conversion is non successful.\nRepresents that a type can be doubled in size.\nPotential errors that can occur.\nThe value type that the channel accepts.\nThis assumes that we have a i32 as data.\nThis assumes that we have a i32 as data.\nA type with double the size of self.\nValue to large.\nComputes the control signal using a PID control strategy.\nComputes the control signal using a PID control strategy.\nComputes the control signal using a PID control strategy.\nComputes the control signal using a PID control strategy.\nThe actuation applied to the <code>Channel</code>.\nThe contribution from the d term.\nDoubles the size of self.\nExtends the reference signal with new values.\nExtends the reference signal with new values.\nCompletely erases previous control signals.\nCompletely erases previous control signals.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHalves the size of the value.\nThe contribution from the i term.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe actual value read from the <code>Channel</code>.\nCreates a new controller that sets the output on the …\nCreates a new controller that sets the output on the …\nThe contribution from the p term.\nThe output pre-threshold.\nRe-exports all of the needed parts of a PID controller.\nThe expected value.\nRegisters the most recent measurement.\nRegisters the most recent measurement.\nSets the output value for the type.\nMakes the instantiation of a new <code>PID</code> controller a bit more …\nThe alpha angle.\nThe battery status at the time of logging.\nThe status of the battery.\nA simple dummy <code>CanMessage</code>.\nA fixed log.\nDenotes a log for a specific subsystem.\nDenotes our different log levels.\nThe message id was not valid.\nThe buffer did not contain sufficient bytes.\nThe target velocity for the left motor.\nThe load cell on the bed.\nDenotes the sensor subsystem for our main control input.\nDenotes that a message can be used as a can message.\nDenotes all of the supported message types.\nThe message relates to motor subsystem.\nDenotes the motors connected to the cart and their target …\nThe message could not be properly parsed.\nThe target velocity for the right motor.\nThe message relates to a sensor subsystem.\nDenotes all of our sensor sub systems.\nThe theta angle.\nThe velocity of that given motor subsystem.\nThe velocity of the given motor.\nWrites to a subsystem.\nDenotes all of the write operations possible with the …\nDefines a few message identifiers as constants and a few …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides a priority queue based <code>Channel</code> abstraction called …\nRepresents a status message from the battery.\nThe message id was not in <code>Message</code>.\nRepresents a write of the left motor state.\nDefines the message enumerations.\nRepresents a status message from the left motor.\nRepresents a status message from the right motor.\nRepresents a write of the left motor state.\nRepresents a write of alpha sensor value.\nRepresents a write of bed loadcell value.\nRepresents a write of front loadcell value.\nRepresents a write of theta sensor value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe buffer is full. This should not happen.\nA simple sender wrapper.\nDequeues  can frame from the buffer ready to send to the …\nEnqueues a new message in the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new sender.\nEnqueues a write to the alpha sensor value.\nEnqueues a left motor write message.\nEnqueues a write to the load cell bed sensor value.\nEnqueues a write to the Load cell front sensor value.\nEnqueues a left motor write message.\nInforms the rest of the system about the status of the …\nInforms the rest of the system about the status of the …\nInforms the rest of the system about the status of the …\nEnqueues a write to the Theta sensor value.\nRepresents an angle in degrees.\nProvides helpers to create <code>Degrees</code> or <code>Radians</code> from i32.\nRepresents an angle in radians.\nUnwraps the type returning the underlying value.\nUnwraps the type returning the underlying value.\nWraps the u32 in a Degrees type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps the u32 in a Radians type.")